How to measure maximum latency in a real-time system 
====================================================

On `real-time`_ systems one of the most important metrics is the maximum latency. 
This is the maximum time it takes for a system to respond to an event. It's 
important because it can be used to determine if a system is capable of 
responding to an event in a timely manner. In other words, it can be used to
determine whether a system can meet the required deadlines.

The key tool here will be the `cyclictest`_ tool.

Install
--------

``cyclictest`` is part of the `rt-tests`_ package, which is a collection of 
programs for testing the real-time capabilities of a Linux system. Install it:

.. code-block:: bash

    sudo apt install rt-tests


Usage
------

``cyclictest`` must be run as root, with sudo, or as a member of the realtime 
group. Get the maximum latency of the system by running:


.. code-block:: console 
    
    $ sudo cyclictest --mlockall --smp --priority=80 --interval=200 --distance=0

    T: 0 (17826) P:80 I:200 C:  37605 Min:      1 Act:    2 Avg:    1 Max:      14
    T: 1 (17827) P:80 I:200 C:  37595 Min:      1 Act:    1 Avg:    1 Max:     176
    T: 2 (17828) P:80 I:200 C:  37583 Min:      1 Act:    2 Avg:    1 Max:      16
    T: 3 (17829) P:80 I:200 C:  37576 Min:      1 Act:    2 Avg:    1 Max:      10
    T: 4 (17830) P:80 I:200 C:  37569 Min:      1 Act:    2 Avg:    1 Max:      15
    T: 5 (17831) P:80 I:200 C:  37549 Min:      1 Act:    2 Avg:    1 Max:       9
    T: 6 (17832) P:80 I:200 C:  37556 Min:      1 Act:    2 Avg:    1 Max:      29
    T: 7 (17833) P:80 I:200 C:  37549 Min:      1 Act:    2 Avg:    1 Max:       5

By default the last command runs until it receives a SIGINT signal (Ctrl+C), or 
other signal that stops the process. To limit the number of iterations use the 
``--loops=`` (or ``-l``) option:

.. code-block:: console
    
    $ sudo cyclictest --mlockall --smp --priority=80 --interval=200 --distance=0 --loops=100000

This will run the test 100000 times.

The results are in microseconds(us) by default, but you can change it to nanoseconds 
with the ``--nsecs`` (or ``-N``) option:

.. code-block:: console
    
    $ sudo cyclictest --mlockall --smp --priority=80 --interval=200 --distance=0 --nsecs

    T: 0 (17964) P:80 I:200 C:  99988 Min:   1480 Act:    2064 Avg:    2101 Max:   53398
    T: 1 (17965) P:80 I:200 C: 100000 Min:   1478 Act:    2104 Avg:    2123 Max:  180355
    T: 2 (17966) P:80 I:200 C: 100000 Min:   1551 Act:    1871 Avg:    1975 Max:  278690
    T: 3 (17967) P:80 I:200 C: 100000 Min:   1810 Act:    2079 Avg:    2091 Max:   22092
    T: 4 (17968) P:80 I:200 C: 100000 Min:   1501 Act:    2064 Avg:    2098 Max:  298477
    T: 5 (17969) P:80 I:200 C: 100000 Min:   1413 Act:    2116 Avg:    2090 Max:   31607
    T: 6 (17970) P:80 I:200 C:  99994 Min:   1673 Act:    2023 Avg:    2100 Max:   35535
    T: 7 (17971) P:80 I:200 C:  99988 Min:   1812 Act:    2105 Avg:    2104 Max:   34724

The **maximum latency** is indicated by the **Max:** value in the output. 

As described on this `OSAL`_ page, `cyclictest`  can also output a histogram of 
the latencies using the ``--histogram`` (or ``-h``) option, which we can plot 
with `gnuplot` after some transformation.

Install the `gnuplot`_ package:

.. code-block:: bash

    sudo apt install gnuplot

Then, download the `histogram-plot.sh`_ script, make it executable and run it:

.. code-block:: bash

    sudo ./histogram-plot.sh

This script executes the ``cyclictest`` with some specific parameters, like 
``-h400`` (for the histogram) and ``-l100000``, then uses `gnuplot` to plot the 
histogram. The resulted histogram will be saved in the file ``plot.png``.

The resulting image should look like this:

.. image:: plot_non-rt.png
   :width: 640px 
   :height: 480px
   :alt: latencies histogram plot

.. Links
.. _real-time: https://ubuntu.com/real-time
.. _cyclictest: https://wiki.linuxfoundation.org/realtime/documentation/howto/tools/cyclictest/start
.. _rt-tests: https://wiki.linuxfoundation.org/realtime/documentation/howto/tools/rt-tests
.. _OSAL: https://www.osadl.org/Create-a-latency-plot-from-cyclictest-hi.bash-script-for-latency-plot.0.html
.. _gnuplot: http://www.gnuplot.vt.edu/
.. _histogram-plot.sh: histogram-plot.sh


.. All code results are generated by a testflinger machine: 202106-29207
.. queue description: 
.. HP EliteBook 830 G8 Notebook PC (64 GB) - Corvette13, Core i7-1185G7 CPU, Intel 8086:a0f0 WiFi
.. Characteristics: 
..          CPU: Core i7-1185G7  
..          RAM: 64GB
..          OS: Ubuntu 22.04.4 LTS
..          Kernel: 6.5.0-21-generic #21~22.04.1-Ubuntu SMP PREEMPT_DYNAMIC Fri Feb  9 13:32:52 UTC 2 x86_64 GNU/Linux